// Code generated by go-bindata.
// sources:
// db/models/base.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbModelsBaseSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6b\x83\x40\x10\x86\xef\xfb\x2b\xe6\x16\xa5\x06\x4a\x21\xbd\xe4\x64\x9b\x2d\x48\x8d\x09\xa9\x42\x72\x5a\xb6\xeb\x34\x2e\xd1\x55\xdc\xb5\xa9\xfd\xf5\x45\x4d\xcc\x07\xf9\xe8\x45\xd0\x7d\x66\x67\x7c\xde\x21\xc3\x21\x3c\x64\x72\x5d\x72\x83\x10\x15\xe4\x75\x41\xdd\x90\x42\xe8\xbe\xf8\x14\xa4\xc1\x4c\x83\x45\x00\xaa\x4a\xc6\xdd\x23\x98\x85\x10\x44\xbe\x0f\xf3\x85\x37\x75\x17\x2b\x78\xa7\x2b\x70\x88\xc8\x95\x41\x65\x20\xa4\xcb\xb0\x7f\x63\xa6\x2e\xb0\xfd\x04\x13\xfa\xe6\x46\x7e\x57\xea\x10\x54\x82\x35\x97\xb3\x0d\xd6\xbb\x12\x5e\x99\x84\x25\x5c\x27\xf0\xcd\x4b\x91\xf0\xd2\x7a\x1a\x8d\xec\xb3\xba\x4a\x63\xc9\x0e\xb3\x9c\x1e\x8a\x12\xb9\xc1\x98\x71\x03\xa1\x37\xa5\x1f\xa1\x3b\x9d\x5b\xcf\x76\x3f\xb1\x43\xaa\x22\xbe\x43\xc4\x98\xa2\xc1\x18\x74\xc6\xd3\x54\x2a\xd3\xb7\x18\x3c\x0e\x88\x3d\x26\x64\x2f\x48\xaa\x18\x7f\x00\x66\x41\x27\xc9\x3a\x5c\x6d\x8f\xaf\x32\xfb\xe9\xff\x81\x38\xc7\x0a\x8f\x1b\x77\xc9\x34\x5c\x93\x4c\xab\x21\x8a\xbc\xc9\xb5\x5c\x30\xe3\x32\xbd\xa5\xb4\xd8\xb2\xaf\x4a\x89\x3b\x08\x4f\xd7\x77\x08\x91\x6b\x03\x9f\x72\x7d\x2c\xad\x3f\xdc\x60\xcd\xb4\xfc\xc5\xab\x80\xca\x95\xc0\x5b\x1d\x50\x89\xb2\x2e\x1a\xc3\x05\xd7\x7a\x9b\x97\xf1\x29\xdd\xff\x7e\x1f\xd8\xe0\xf2\x46\x9c\x6f\xd4\x85\x95\x38\x41\xda\xd4\x77\xee\xbd\x60\x42\x97\x4d\x58\xad\x7e\xab\x75\x6b\x8f\xff\x02\x00\x00\xff\xff\x28\x7a\x71\xfe\x43\x03\x00\x00")

func dbModelsBaseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbModelsBaseSql,
		"db/models/base.sql",
	)
}

func dbModelsBaseSql() (*asset, error) {
	bytes, err := dbModelsBaseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/models/base.sql", size: 835, mode: os.FileMode(420), modTime: time.Unix(1496562143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/models/base.sql": dbModelsBaseSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"models": &bintree{nil, map[string]*bintree{
			"base.sql": &bintree{dbModelsBaseSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

